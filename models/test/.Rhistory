setwd("../models/test/")
###NOTE: need to set working direcory to results directory###
#######################Config params
##Model name
modelName <- "test"
##Topic probabilities over time file
topicsXTimeFile <- "test_topicTS.csv"
##Human-named topics file (set to NULL if missing)
#humanNamedTopicsFile <- "FACETS_ANC_70topics_named.csv"
humanNamedTopicsFile <- NULL
##Topics of interest file (topics to generate events for and their thresholds).
##If NULL, plots are generated for all topics and zThresh (below) is used
#toiFile <- "FACETS_ANC_70topics_topicsOfInterest.csv"
toiFile <- NULL
##PDF file name
pdfOutName <- paste(modelName,"topicTimeSeries.pdf",sep="_")
#Do moving average smoothing
doSmoothing <- T
#Moving average window for smoothing
windowSize <-  7
##True to only plot if prevalence reaches above threshold
plotImportantOnly <- F
##If no data exist for a topic at a particular time step, Lava generates a flat prob dist (1/nTopics).
##If true, removes these values
removeDefVals <- F
#number SDs to use for threshold
zThresh <- c(1.2)
##Set to true to automatically do y-axis range by topic prevalence range
yrngByTopic <- T
##If yrngByTopic is F, this is y-axis range
yrng <- c(0,.5)
################################################Functions
smoothData <- function(dat,windowSize)
{
smoothDat <- NULL
i <- 1
#while(i < length(dat))
for(i in 1:length(dat))
{
windowRng <- c(i-(windowSize-1)/2,i+(windowSize-1)/2)
if (windowRng[1] < 1) windowRng[1] <- 1
if (windowRng[2] > length(dat)) windowRng[2] <- length(dat)
window <- windowRng[1]:windowRng[2]
smoothDat[i] <- mean(dat[window])
#i <- i +windowSize
}
smoothDat
}
plotThresholdExceedings <- function(x,y,sel,region,topic)
{
seg <- NULL
for (i in 1:length(sel))
{
if (i > 1)
{
if (sel[i]-sel[i-1] > 1){
lines(x[seg],y[seg],col=2)
points(x[seg],y[seg],col=2,cex=.8)
duration <- as.integer(difftime(x[seg[length(seg)]],x[seg[1]],units="days")) + 1   ##Needs to be inclusive, so add 1
#events <<- rbind(events,data.frame("",eventType,x[seg[1]],duration,"LaVA Generated Event",region,"","",""))
seg <- NULL
}else if (i==length(sel))    #Make sure we get final segment
{
seg <- c(seg,sel[i])
lines(x[seg],y[seg],col=2)
points(x[seg],y[seg],col=2,cex=.8)
duration <- as.integer(difftime(x[seg[length(seg)]],x[seg[1]],units="days")) + 1   ##Needs to be inclusive, so add 1
#events <<- rbind(events,data.frame("",eventType,x[seg[1]],duration,"LaVA Generated Event",region,"","",""))
}
}
seg <- c(seg,sel[i])
}
if (length(sel)==1)
{
points(x[sel[1]],y[sel[1]],col=2,,cex=.8)
}
}
makePlotForTopic <- function(t,thresh)
{
topicName <- labeledTopics$topic_name[t+1]
subset <- topics[topics$topic_id==t,]
print(paste("Topic=",t," name=",topicName," n=",nrow(subset),sep=""))
if (doSmoothing) {
smoothProb <- smoothData(subset$prob,windowSize)
}else {smoothProb <- subset$prob}
envelope <- mean(subset$prob,na.rm=T)+thresh*sd(subset$prob,na.rm=T)
envelope <- as.numeric(envelope)
if (yrngByTopic) yrng <- c(0,max(smoothProb,na.rm=T))
sel <- which(smoothProb > min(envelope))
if (length(sel) > 0 | !plotImportantOnly){
title <- paste("Topic=",t,"-",topicName,sep="")
plot(subset$date,smoothProb,type="l",axes=F,xlab="",ylab="Probability",main=title,ylim=yrng,cex.main=.75)
axis(2)
rng <- as.POSIXct(round(range(subset$date),"days"))
axis.POSIXct(1,at=seq(rng[1],rng[2],by="month"),format="%Y-%m-%d")
plotThresholdExceedings(subset$date,smoothProb,sel,t,eventType)
colors <- heat.colors(length(thresh))
for (j in 1:length(envelope))
{
lines(range(subset$date),rep(envelope[j],2),col=colors[j])
text(max(subset$date),envelope[j],labels=as.character(thresh[j]))
}
}
}
###############################################End Functions
topics <- read.csv(topicsXTimeFile)
topics$date <- strptime(topics$date,"%Y-%m-%d")
numTopics <- length(unique(topics$topic_id))
if (!is.null(humanNamedTopicsFile)) {
labeledTopics <- read.csv(humanNamedTopicsFile)
}else{
##If no labeled topics, make generic ones
topic_name <- rep("",numTopics)
model <- rep(modelName,numTopics)
good <- rep(1,numTopics)
topic_id <- 0:(numTopics-1)
labeledTopics <- data.frame(model=model,topic_id=topic_id,topic_name=topic_name,good=good)
}
##Topics of interest
if (is.null(toiFile)) {
tois <- NULL
}else{
tois <- read.csv(toiFile)
}
if (removeDefVals)
{
#Lava defaults to flat distribution if there are no data for region & time
defVal <- 1/numTopics
#Safe to make default values NA
topics$prob[topics$prob==defVal] <- NA
}
#Remove NAs
topics <- topics[!is.na(topics$prob),]
pdf(pdfOutName,width=8,height=6)
par(mfrow=c(3,2))
if (is.null(tois)){
threshs <- NULL
for(i in 1:nrow(labeledTopics))
{
threshs <- rbind(threshs,zThresh)
}
threshNames <- NULL
for (i in 1:length(zThresh))
{
threshNames[i] <- paste("threshold",i,sep="")
}
tois <- data.frame(labeledTopics[,2:3],threshs)
colnames(tois) <- c("topicId","eventType",threshNames)
}
for (i in 1:nrow(tois))
{
t <- tois$topicId[i]
#eventType <- tois$eventType[i]
##Can have possibly many threshold columns. Select columns that have 'threshold' in name
whichThresh <- grep("threshold",colnames(tois))
thresh <- tois[i,whichThresh]
makePlotForTopic(t,thresh)
}
dev.off()
###NOTE: need to set working direcory to results directory###
#######################Config params
##Model name
modelName <- "test"
##Topic probabilities over time file
topicsXTimeFile <- "test_topicTS.csv"
##Human-named topics file (set to NULL if missing)
#humanNamedTopicsFile <- "FACETS_ANC_70topics_named.csv"
humanNamedTopicsFile <- NULL
##Topics of interest file (topics to generate events for and their thresholds).
##If NULL, plots are generated for all topics and zThresh (below) is used
#toiFile <- "FACETS_ANC_70topics_topicsOfInterest.csv"
toiFile <- NULL
##PDF file name
pdfOutName <- paste(modelName,"topicTimeSeries.pdf",sep="_")
#Do moving average smoothing
doSmoothing <- T
#Moving average window for smoothing
windowSize <-  7
##True to only plot if prevalence reaches above threshold
plotImportantOnly <- F
##If no data exist for a topic at a particular time step, Lava generates a flat prob dist (1/nTopics).
##If true, removes these values
removeDefVals <- F
#number SDs to use for threshold
zThresh <- c(1.2)
##Set to true to automatically do y-axis range by topic prevalence range
yrngByTopic <- T
##If yrngByTopic is F, this is y-axis range
yrng <- c(0,.5)
################################################Functions
smoothData <- function(dat,windowSize)
{
smoothDat <- NULL
i <- 1
#while(i < length(dat))
for(i in 1:length(dat))
{
windowRng <- c(i-(windowSize-1)/2,i+(windowSize-1)/2)
if (windowRng[1] < 1) windowRng[1] <- 1
if (windowRng[2] > length(dat)) windowRng[2] <- length(dat)
window <- windowRng[1]:windowRng[2]
smoothDat[i] <- mean(dat[window])
#i <- i +windowSize
}
smoothDat
}
plotThresholdExceedings <- function(x,y,sel,region,topic)
{
seg <- NULL
for (i in 1:length(sel))
{
if (i > 1)
{
if (sel[i]-sel[i-1] > 1){
lines(x[seg],y[seg],col=2)
points(x[seg],y[seg],col=2,cex=.8)
duration <- as.integer(difftime(x[seg[length(seg)]],x[seg[1]],units="days")) + 1   ##Needs to be inclusive, so add 1
#events <<- rbind(events,data.frame("",eventType,x[seg[1]],duration,"LaVA Generated Event",region,"","",""))
seg <- NULL
}else if (i==length(sel))    #Make sure we get final segment
{
seg <- c(seg,sel[i])
lines(x[seg],y[seg],col=2)
points(x[seg],y[seg],col=2,cex=.8)
duration <- as.integer(difftime(x[seg[length(seg)]],x[seg[1]],units="days")) + 1   ##Needs to be inclusive, so add 1
#events <<- rbind(events,data.frame("",eventType,x[seg[1]],duration,"LaVA Generated Event",region,"","",""))
}
}
seg <- c(seg,sel[i])
}
if (length(sel)==1)
{
points(x[sel[1]],y[sel[1]],col=2,,cex=.8)
}
}
makePlotForTopic <- function(t,thresh)
{
topicName <- labeledTopics$topic_name[t+1]
subset <- topics[topics$topic_id==t,]
print(paste("Topic=",t," name=",topicName," n=",nrow(subset),sep=""))
if (doSmoothing) {
smoothProb <- smoothData(subset$prob,windowSize)
}else {smoothProb <- subset$prob}
envelope <- mean(subset$prob,na.rm=T)+thresh*sd(subset$prob,na.rm=T)
envelope <- as.numeric(envelope)
if (yrngByTopic) yrng <- c(0,max(smoothProb,na.rm=T))
sel <- which(smoothProb > min(envelope))
if (length(sel) > 0 | !plotImportantOnly){
title <- paste("Topic=",t,"-",topicName,sep="")
plot(subset$date,smoothProb,type="l",axes=F,xlab="",ylab="Probability",main=title,ylim=yrng,cex.main=.75)
axis(2)
rng <- as.POSIXct(round(range(subset$date),"days"))
axis.POSIXct(1,at=seq(rng[1],rng[2],by="month"),format="%Y-%m-%d")
plotThresholdExceedings(subset$date,smoothProb,sel,t,eventType)
colors <- heat.colors(length(thresh))
for (j in 1:length(envelope))
{
lines(range(subset$date),rep(envelope[j],2),col=colors[j])
text(max(subset$date),envelope[j],labels=as.character(thresh[j]))
}
}
}
###############################################End Functions
topics <- read.csv(topicsXTimeFile)
topics$date <- strptime(topics$date,"%Y-%m-%d")
numTopics <- length(unique(topics$topic_id))
if (!is.null(humanNamedTopicsFile)) {
labeledTopics <- read.csv(humanNamedTopicsFile)
}else{
##If no labeled topics, make generic ones
topic_name <- rep("",numTopics)
model <- rep(modelName,numTopics)
good <- rep(1,numTopics)
topic_id <- 0:(numTopics-1)
labeledTopics <- data.frame(model=model,topic_id=topic_id,topic_name=topic_name,good=good)
}
##Topics of interest
if (is.null(toiFile)) {
tois <- NULL
}else{
tois <- read.csv(toiFile)
}
if (removeDefVals)
{
#Lava defaults to flat distribution if there are no data for region & time
defVal <- 1/numTopics
#Safe to make default values NA
topics$prob[topics$prob==defVal] <- NA
}
#Remove NAs
topics <- topics[!is.na(topics$prob),]
pdf(pdfOutName,width=8,height=6)
par(mfrow=c(3,2))
if (is.null(tois)){
threshs <- NULL
for(i in 1:nrow(labeledTopics))
{
threshs <- rbind(threshs,zThresh)
}
threshNames <- NULL
for (i in 1:length(zThresh))
{
threshNames[i] <- paste("threshold",i,sep="")
}
tois <- data.frame(labeledTopics[,2:3],threshs)
colnames(tois) <- c("topicId","eventType",threshNames)
}
for (i in 1:nrow(tois))
{
t <- tois$topicId[i]
#eventType <- tois$eventType[i]
##Can have possibly many threshold columns. Select columns that have 'threshold' in name
whichThresh <- grep("threshold",colnames(tois))
thresh <- tois[i,whichThresh]
makePlotForTopic(t,thresh)
}
dev.off()
